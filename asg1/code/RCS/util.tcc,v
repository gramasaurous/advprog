head	1.3;
access;
symbols;
locks;
comment	@# @;


1.3
date	2014.06.11.20.49.31;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.06.11.20.34.25;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.03.27.00.34.27;	author -;	state -;
branches;
next	;


desc
@@


1.3
log
@-
@
text
@// $Id: util.tcc,v 1.2 2014-06-11 13:34:25-07 - - $

template <typename item_t>
ostream& operator<< (ostream& out, const vector<item_t>& vec) {
   string space = "";
   for (const auto& item: vec) {
      out << space << item;
      space = " ";
   }
   return out;
}

@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: util.tcc,v 1.1 2014-03-26 17:34:27-07 - - $
d5 4
a8 5
   bool want_space = false;
   for (const auto& itor: vec); itor != vec.cend(); ++itor) {
      if (want_space) out << " ";
      out << *itor;
      want_space = true;
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id$
d6 1
a6 2
   for (typename vector<item_t>::const_iterator itor = vec.cbegin();
        itor != vec.cend(); ++itor) {
a7 1
                 else want_space = true;
d9 1
@
