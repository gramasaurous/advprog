head	1.8;
access;
symbols;
locks;
comment	@ * @;


1.8
date	2014.06.11.20.49.31;	author -;	state -;
branches;
next	1.7;

1.7
date	2014.06.11.20.34.25;	author -;	state -;
branches;
next	1.6;

1.6
date	2014.05.30.02.10.36;	author -;	state -;
branches;
next	1.5;

1.5
date	2014.03.27.01.39.40;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.03.27.00.10.32;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.06.19.01.02.16;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.06.19.00.50.59;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.06.19.00.32.08;	author -;	state -;
branches;
next	;


desc
@@


1.8
log
@-
@
text
@// $Id: commands.h,v 1.7 2014-06-11 13:34:25-07 - - $

#ifndef __COMMANDS_H__
#define __COMMANDS_H__

#include <map>
using namespace std;

#include "inode.h"
#include "util.h"

//
// A couple of convenient usings to avoid verbosity.
//

using command_fn = void (*)(inode_state& state, const wordvec& words);
using command_map = map<string,command_fn>;

//
// commands -
//    A class to hold and dispatch each of the command functions.
//    Each command "foo" is interpreted by a command_fn fn_foo.
// ctor -
//    The default ctor initializes the map.
// operator[] -
//    Given a string, returns a command_fn associated with it,
//    or 0 if not found.
//

class commands {
   private:
      commands (const inode&) = delete; // copy ctor
      commands& operator= (const inode&) = delete; // operator=
      command_map map;
   public:
      commands();
      command_fn at (const string& cmd);
};


//
// execution functions -
//    See the man page for a description of each of these functions.
//

void fn_cat    (inode_state& state, const wordvec& words);
void fn_cd     (inode_state& state, const wordvec& words);
void fn_echo   (inode_state& state, const wordvec& words);
void fn_exit   (inode_state& state, const wordvec& words);
void fn_ls     (inode_state& state, const wordvec& words);
void fn_lsr    (inode_state& state, const wordvec& words);
void fn_make   (inode_state& state, const wordvec& words);
void fn_mkdir  (inode_state& state, const wordvec& words);
void fn_prompt (inode_state& state, const wordvec& words);
void fn_pwd    (inode_state& state, const wordvec& words);
void fn_rm     (inode_state& state, const wordvec& words);
void fn_rmr    (inode_state& state, const wordvec& words);

//
// exit_status_message -
//    Prints an exit message and returns the exit status, as recorded
//    by any of the functions.
//

int exit_status_message();
class ysh_exit_exn: public exception {};

#endif

@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: commands.h,v 1.6 2014-05-29 19:10:36-07 - - $
d16 2
a17 2
using function = void (*)(inode_state& state, const wordvec& words);
using commandmap = map<string,function>;
d22 1
a22 1
//    Each command "foo" is interpreted by a function fn_foo.
d26 1
a26 1
//    Given a string, returns a function associated with it,
d34 1
a34 1
      commandmap map;
d37 1
a37 1
      function at (const string& cmd);
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: commands.h,v 1.5 2014-03-26 18:39:40-07 - - $
a6 1

@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: commands.h,v 1.4 2014-03-26 17:10:32-07 - - $
d14 1
a14 1
// A couple of convenient typedefs to avoid verbosity.
d17 2
a18 2
typedef void (*function) (inode_state& state, const wordvec& words);
typedef map<string, function> commandmap;
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: commands.h,v 1.3 2013-06-18 18:02:16-07 - - $
a10 1
#include "trace.h"
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: commands.h,v 1.2 2013-06-18 17:50:59-07 - - $
d18 1
a18 1
typedef void (*function) (inode_state &state, const wordvec &words);
d34 2
a35 2
      commands (const inode &) = delete; // copy ctor
      commands &operator= (const inode &) = delete; // operator=
d39 1
a39 1
      function at (const string &cmd);
d48 12
a59 12
void fn_cat    (inode_state &state, const wordvec &words);
void fn_cd     (inode_state &state, const wordvec &words);
void fn_echo   (inode_state &state, const wordvec &words);
void fn_exit   (inode_state &state, const wordvec &words);
void fn_ls     (inode_state &state, const wordvec &words);
void fn_lsr    (inode_state &state, const wordvec &words);
void fn_make   (inode_state &state, const wordvec &words);
void fn_mkdir  (inode_state &state, const wordvec &words);
void fn_prompt (inode_state &state, const wordvec &words);
void fn_pwd    (inode_state &state, const wordvec &words);
void fn_rm     (inode_state &state, const wordvec &words);
void fn_rmr    (inode_state &state, const wordvec &words);
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: commands.h,v 1.1 2013-06-18 17:32:08-07 - - $
d39 1
a39 1
      function operator[] (const string &cmd);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: commands.h,v 1.2 2012-03-29 17:31:42-07 - - $
d34 2
a35 2
      commands (const inode &); // disable copy ctor
      commands &operator= (const inode &); // disable operator=
@
