head	1.13;
access;
symbols;
locks;
comment	@ * @;


1.13
date	2014.06.13.01.10.25;	author -;	state -;
branches;
next	1.12;

1.12
date	2014.06.13.00.57.27;	author -;	state -;
branches;
next	1.11;

1.11
date	2014.06.13.00.16.02;	author -;	state -;
branches;
next	1.10;

1.10
date	2014.06.11.20.49.31;	author -;	state -;
branches;
next	1.9;

1.9
date	2014.06.11.20.34.25;	author -;	state -;
branches;
next	1.8;

1.8
date	2014.05.30.02.09.34;	author -;	state -;
branches;
next	1.7;

1.7
date	2014.04.10.00.04.58;	author -;	state -;
branches;
next	1.6;

1.6
date	2014.03.27.02.55.18;	author -;	state -;
branches;
next	1.5;

1.5
date	2014.03.27.01.39.40;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.03.27.00.15.54;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.03.27.00.10.32;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.06.19.00.50.59;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.06.19.00.32.08;	author -;	state -;
branches;
next	;


desc
@@


1.13
log
@-
@
text
@// $Id: inode.h,v 1.12 2014-06-12 17:57:27-07 - - $

#ifndef __INODE_H__
#define __INODE_H__

#include <exception>
#include <iostream>
#include <memory>
#include <map>
#include <vector>
using namespace std;

#include "util.h"

//
// inode_t -
//    An inode is either a directory or a plain file.
//

enum inode_t {PLAIN_INODE, DIR_INODE};
class inode;
class file_base;
class plain_file;
class directory;
using inode_ptr = shared_ptr<inode>;
using file_base_ptr = shared_ptr<file_base>;
using plain_file_ptr = shared_ptr<plain_file>;
using directory_ptr = shared_ptr<directory>;

//
// inode_state -
//    A small convenient class to maintain the state of the simulated
//    process:  the root (/), the current directory (.), and the
//    prompt.
//

class inode_state {
   friend class inode;
   friend ostream& operator<< (ostream& out, const inode_state&);
   private:
      inode_state (const inode_state&) = delete; // copy ctor
      inode_state& operator= (const inode_state&) = delete; // op=
      inode_ptr root {nullptr};
      inode_ptr cwd {nullptr};
      string prompt {"% "};
   public:
      inode_state();
};


//
// class inode -
//
// inode ctor -
//    Create a new inode of the given type.
// get_inode_nr -
//    Retrieves the serial number of the inode.  Inode numbers are
//    allocated in sequence by small integer.
// size -
//    Returns the size of an inode.  For a directory, this is the
//    number of dirents.  For a text file, the number of characters
//    when printed (the sum of the lengths of each word, plus the
//    number of words.
//    

class inode {
   friend class inode_state;
   private:
      static int next_inode_nr;
      int inode_nr;
      inode_t type;
      file_base_ptr contents;
   public:
      inode (inode_t init_type);
      int get_inode_nr() const;
};

//
// class file_base -
//
// Just a base class at which an inode can point.  No data or
// functions.  Makes the synthesized members useable only from
// the derived classes.
//

class file_base {
   protected:
      file_base () = default;
      file_base (const file_base&) = default;
      file_base (file_base&&) = default;
      file_base& operator= (const file_base&) = default;
      file_base& operator= (file_base&&) = default;
      virtual ~file_base () = default;
      virtual size_t size() const = 0;
   public:
      friend plain_file_ptr plain_file_ptr_of (file_base_ptr);
      friend directory_ptr directory_ptr_of (file_base_ptr);
};


//
// class plain_file -
//
// Used to hold data.
// synthesized default ctor -
//    Default vector<string> is a an empty vector.
// readfile -
//    Returns a copy of the contents of the wordvec in the file.
//    Throws an yshell_exn for a directory.
// writefile -
//    Replaces the contents of a file with new contents.
//    Throws an yshell_exn for a directory.
//

class plain_file: public file_base {
   private:
      wordvec data;
   public:
      size_t size() const override;
      const wordvec& readfile() const;
      void writefile (const wordvec& newdata);
};

//
// class directory -
//
// Used to map filenames onto inode pointers.
// default ctor -
//    Creates a new map with keys "." and "..".
// remove -
//    Removes the file or subdirectory from the current inode.
//    Throws an yshell_exn if this is not a directory, the file
//    does not exist, or the subdirectory is not empty.
//    Here empty means the only entries are dot (.) and dotdot (..).
// mkdir -
//    Creates a new directory under the current directory and 
//    immediately adds the directories dot (.) and dotdot (..) to it.
//    Note that the parent (..) of / is / itself.  It is an error
//    if the entry already exists.
// mkfile -
//    Create a new empty text file with the given name.  Error if
//    a dirent with that name exists.

class directory: public file_base {
   private:
      map<string,inode_ptr> dirents;
   public:
      size_t size() const override;
      void remove (const string& filename);
      inode& mkdir (const string& dirname);
      inode& mkfile (const string& filename);
};

#endif

@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: inode.h,v 1.11 2014-06-12 17:16:02-07 - - $
d22 1
a22 1
class file;
d26 1
a26 1
using file_ptr = shared_ptr<file>;
d72 1
a72 1
      file_ptr contents;
d93 2
a94 1
      ~file_base () = default;
d96 2
a97 2
      friend plain_file_ptr plain_file_ptr_of (file_ptr);
      friend directory_ptr directory_ptr_of (file_ptr);
d119 1
a119 1
      int size() const;
d148 1
a148 1
      int size() const;
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: inode.h,v 1.10 2014-06-11 13:49:31-07 - - $
a20 7

//
// directory -
//    A directory is a list of paired strings (filenames) and inodes.
//    An inode in a directory may be a directory or a file.
//

d22 3
a25 1
class file;
d27 2
d69 1
a72 1
      static int next_inode_nr;
d79 1
a79 1
// class file -
d86 1
a86 1
class file {
d88 9
a96 6
      file () = default;
      file (const file&) = default;
      file (file&&) = default;
      file& operator= (const file&) = default;
      file& operator= (file&&) = default;
      ~file () = default;
d99 1
d114 1
a114 1
class plain_file: public file {
d143 1
a143 1
class directory: public file {
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: inode.h,v 1.9 2014-06-11 13:34:25-07 - - $
d20 1
a20 1
enum inode_t {DIR_INODE, FILE_INODE};
d30 2
a31 1
using directory = map<string,inode_ptr>;
d58 1
a58 1
//    Create a new inode of the given type, using a union.
d67 38
d111 17
a140 1
//    
d142 1
a142 3

class inode {
   friend class inode_state;
d144 1
a144 7
      int inode_nr;
      inode_t type;
      union {
         directory* dirents;
         wordvec* data;
      } contents;
      static int next_inode_nr;
a145 4
      inode (inode_t init_type);
      inode (const inode& source);
      inode& operator= (const inode& from);
      int get_inode_nr() const;
a146 2
      const wordvec& readfile() const;
      void writefile (const wordvec& newdata);
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: inode.h,v 1.8 2014-05-29 19:09:34-07 - - $
d8 1
d29 2
a30 1
using directory = map<string,inode*>;
d45 2
a46 2
      inode* root {nullptr};
      inode* cwd {nullptr};
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: inode.h,v 1.7 2014-04-09 17:04:58-07 - - $
a9 1

a49 2
ostream& operator<< (ostream& out, const inode_state&);

@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: inode.h,v 1.6 2014-03-26 19:55:18-07 - - $
d29 1
a29 1
typedef map<string, inode*> directory;
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: inode.h,v 1.5 2014-03-26 18:39:40-07 - - $
d44 3
a46 3
      inode* root;
      inode* cwd;
      string prompt;
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: inode.h,v 1.4 2014-03-26 17:15:54-07 - - $
d88 1
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: inode.h,v 1.3 2014-03-26 17:10:32-07 - - $
a12 1
#include "trace.h"
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: inode.h,v 1.2 2013-06-18 17:50:59-07 - - $
d30 1
a30 1
typedef map<string, inode *> directory;
d45 2
a46 2
      inode *root;
      inode *cwd;
d95 2
a96 2
         directory *dirents;
         wordvec *data;
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: inode.h,v 1.1 2013-06-18 17:32:08-07 - - $
d41 1
a41 1
   friend ostream &operator<< (ostream &out, const inode_state &);
d43 2
a44 2
      inode_state (const inode_state &) = delete; // copy ctor
      inode_state &operator= (const inode_state &) = delete; // op=
d52 1
a52 1
ostream &operator<< (ostream &out, const inode_state &);
d101 2
a102 2
      inode (const inode &source);
      inode &operator= (const inode &from);
d105 5
a109 5
      const wordvec &readfile() const;
      void writefile (const wordvec &newdata);
      void remove (const string &filename);
      inode &mkdir (const string &dirname);
      inode &mkfile (const string &filename);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: inode.h,v 1.6 2013-06-07 15:43:30-07 - - $
d43 2
a44 2
      inode_state (const inode_state &); // disable copy ctor
      inode_state &operator= (const inode_state &); // disable op=
@
